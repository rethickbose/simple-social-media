{"version":3,"sources":["firebase.js","Posts.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Posts","postId","user","username","caption","imageurl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","setCaption","progress","setProgress","image","setImage","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","posts","setPosts","open","setOpen","classes","React","modalStyle","email","setEmail","setUsername","password","setPassword","setUser","openSignIn","setOpenSignIn","onAuthStateChanged","authUser","id","Modal","onClose","style","fontSize","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bef83804.chunk.js","sourcesContent":["\n\n\n  import firebase from \"firebase\";\n  \n  const firebaseApp= firebase.initializeApp({apiKey: \"AIzaSyCzGx0bCSZFwhJjxVSpeRxm9aCUh-BEsdw\",\n  authDomain: \"instagram-clone-one.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-one.firebaseio.com\",\n  projectId: \"instagram-clone-one\",\n  storageBucket: \"instagram-clone-one.appspot.com\",\n  messagingSenderId: \"899318828116\",\n  appId: \"1:899318828116:web:84101e51fea306b9c231c1\",\n  measurementId: \"G-MYMNYWMPPX\"\n\n  });\n\n  const db= firebaseApp.firestore();\n  const auth= firebase.auth();\n  const storage =firebase.storage(); \n\n  \n\n  export {db,auth,storage};","import React, {useState,useEffect}from 'react'\nimport './Posts.css';\nimport Avatar from '@material-ui/core/Avatar';\nimport { db } from './firebase';\nimport firebase from  \"firebase\";\n\n\n\nconst Posts = ({postId,user,username, caption ,imageurl})=> {\n    \n    const [comments,setComments]= useState([]);\n    const [comment,setComment]= useState('');\n\n    \n    useEffect(() => {\n        let unsubscribe;\n        if(postId){\n\n            unsubscribe=db\n                .collection(\"posts\")\n                .doc(postId)\n                .collection(\"comments\")\n                .orderBy('timestamp','desc')                \n                .onSnapshot((snapshot)=>{\n                    setComments(snapshot.docs.map((doc)=>doc.data()));\n                });\n        }\n\n\n        \n        return () => {\n            unsubscribe();\n        };\n    }, [postId]); \n  \n    const postComment = (event) =>{\n        event.preventDefault();\n\n        db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n            text:comment,\n            username:user.displayName,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp()\n        });\n        setComment('');\n\n    }\n  \n  \n  \n  \n    \n    return (\n        <div className=\"posts\">\n           <div className=\"posts_header\"> \n                <Avatar \n                        className=\"posts_avatar\"\n                        alt={username}\n                        src=\"/static/images/avatar/1.jpg\"\n                />\n            \n            \n            \n                 <h3>{username}</h3>\n            </div>\n            \n            \n            <img className=\"posts__image\" src={imageurl} />\n            \n            \n            <h4 className=\"posts_text\"><strong>{username}</strong>: {caption} </h4>\n\n            <div className=\"post__comments\">\n                {\n                    comments.map((comment)=>(\n                        <p>\n                            <strong>{comment.username}</strong>{comment.text}\n                        </p>\n\n                    ))\n                }\n\n\n            </div>\n            \n            \n            {user && (  <form className=\"post__commentBox\">\n                <input\n                 className=\"post__input\"\n                 type=\"text\"\n                 placeholder=\"add comment\"\n                 value={comment}\n                 onChange={(e)=>setComment(e.target.value)}\n\n\n                />\n                <button\n                className=\"post__button\"\n                disabled={!comment}\n                type=\"submit\"\n                onClick={postComment}\n                >Post</button>\n            </form>)}\n            \n          \n       \n       \n       \n       \n       \n       \n       \n       \n        </div>\n    )\n}\n\n\nexport default Posts;","import { Button } from '@material-ui/core'\nimport React, {useState} from 'react'\nimport {storage,db} from './firebase';\nimport firebase from  \"firebase\";\nimport './ImageUpload.css';\n \n\nfunction ImageUpload({username}) {\n   \n    const [caption,setCaption]=useState('');\n    const [progress,setProgress]=useState(0);\n    const [image,setImage]=useState(null);\n\n   \n   const handleChange=(e)=>{\n        if(e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n\n   }\n   \n   \n   const handleUpload = ()=> {\n      \n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n    uploadTask.on(\n\n        \"state_changed\",\n        (snapshot)=>{\n                //progress Function\n                const progress = Math.round(\n                    (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                );\n                setProgress(progress);\n\n        },\n        (error)=>{\n            //error function\n            console.log(error);\n            alert(error.message);\n        },\n        ()=>{\n            //complete function\n            storage\n                .ref(\"images\")\n                .child(image.name)\n                .getDownloadURL()\n                .then( url => {\n\n                        db.collection(\"posts\").add({\n                           timestamp: firebase.firestore.FieldValue.serverTimestamp(),     \n                            caption:caption,\n                            imageurl:url,\n                            username:username\n                       \n                        });\n\n                        setProgress(0);\n                        setCaption(\"\");\n                        setImage(null);\n                \n                })\n\n        }\n\n    )\n\n   }\n\n\n    return (\n        <div className=\"imageupload\">\n        \n        <progress className=\"imageupload_progress\" value={progress} max=\"100\" />\n        <input type=\"text\" placeholder=\"Enter the caption\" onChange={event=> setCaption(event.target.value)}  value={caption}/>\n        <input type=\"file\" onChange={handleChange} />\n        <Button onClick={handleUpload}>\n            Upload\n        </Button>\n        \n        \n        \n        \n        </div>\n    )\n}\n\nexport default ImageUpload\n","import React, {useState, useEffect } from 'react';\nimport DynamicFeedIcon from '@material-ui/icons/DynamicFeed';\nimport Posts from './Posts';\nimport './App.css';\nimport {auth, db} from './firebase';\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button ,Input} from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport InstagramEmbed from 'react-instagram-embed';\n\nfunction getModalStyle() {\n  const top = 50 ;\n  const left = 50 ;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n\n\n\n\n\nfunction App() {\n   const [posts, setPosts] = useState([]);\n   const [open , setOpen]=useState(false);\n   const classes = useStyles();\n   const [modalStyle] = React.useState(getModalStyle);\n  \n\n   const [email, setEmail] = useState('');\n   const [username, setUsername] = useState('');\n   const [password, setPassword] = useState('');\n   const[user,setUser]=useState(null)\n  const[openSignIn,setOpenSignIn]=useState(false);\n\n\n\n   useEffect(() => {\n    const unsubscribe= auth.onAuthStateChanged((authUser)=>{\n        if(authUser)\n        {\n            console.log(authUser);\n            setUser(authUser);\n           \n        \n       }\n        \n        else{\n          setUser(null)\n        }\n          \n     })\n\n     return()=>{\n      unsubscribe();\n    }\n   }, [user,username])\n   \n   \n   useEffect(()=>{\n    db.collection(\"posts\").orderBy('timestamp','desc').onSnapshot(snapshot=>(\n\n      setPosts(snapshot.docs.map(doc=>({\n        \n        id:doc.id,\n        posts:doc.data()\n      })))      \n    ))\n\n   }, [] );\n  \n   const signUp = (event)=>{\n    event.preventDefault();\n\n     auth\n    .createUserWithEmailAndPassword(email,password)\n    .then((authUser)=>{\n        return  authUser.user.updateProfile({\n          displayName:username\n        })\n      })\n    .catch((error)=>alert(error.message));\n   \n    setOpen(false);\n  }\n\n\n   const signIn = (event) => {\n     event.preventDefault();\n\n     auth\n     .signInWithEmailAndPassword(email,password)\n     .catch( (error) =>  alert(error.message))\n   \n    setOpenSignIn(false);\n\n    }\n\n\n\n\n  return (\n    <div className=\"App\">\n   \n     \n     \n     \n     \n     \n     <Modal\n        open={open}\n        onClose={()=>setOpen(false)   }\n        \n      >\n        <div style={modalStyle} className={classes.paper}>\n              \n              <form className=\"app_signup\">\n              <center>\n\n                  <div className=\"app_headerImage\">\n                          <DynamicFeedIcon  fontSize=\"large\"  />\n                  </div>  \n              </center>\n              <Input \n                placeholder=\"username\" \n                type=\"text\"\n                value={username}\n                onChange={(e)=>setUsername(e.target.value)}\n\n              />\n              <Input \n              placeholder=\"email\" \n              type=\"text\"\n              value={email}\n              onChange={(e)=>setEmail(e.target.value)}\n\n              />\n              <Input \n              placeholder=\"password\" \n              type=\"password\"\n              value={password}\n              onChange={(e)=>setPassword(e.target.value)}\n\n                />\n\n              <Button type=\"submit\" onClick={signUp}> sign Up</Button>\n\n\n\n\n\n              </form>\n              \n              \n              \n        </div>\n      </Modal>\n\n      <Modal\n        open={openSignIn}\n        onClose={()=>setOpenSignIn(false)   }\n        \n      >\n        <div style={modalStyle} className={classes.paper}>\n              \n              <form className=\"app_signup\">\n              <center>\n\n                  <div className=\"app_headerImage\">\n                          <DynamicFeedIcon  fontSize=\"large\"  />\n                  </div>  \n              </center>\n              \n              <Input \n              placeholder=\"email\" \n              type=\"text\"\n              value={email}\n              onChange={(e)=>setEmail(e.target.value)}\n\n              />\n              <Input \n              placeholder=\"password\" \n              type=\"password\"\n              value={password}\n              onChange={(e)=>setPassword(e.target.value)}\n\n                />\n\n              <Button type=\"submit\" onClick={signIn}> sign In</Button>\n\n\n\n\n\n              </form>\n              \n              \n              \n        </div>\n      </Modal>\n\n\n       \n          <div className=\"app_header\" >\n         \n            <div className=\"app_headerImage\">\n                 <DynamicFeedIcon  fontSize=\"large\"  />\n            </div>  \n           \n            {user ? (\n            <Button onClick={()=>auth.signOut()}>Logout</Button>\n\n          ):\n          \n          (\n              <div className=\"app_loginContainer\">\n              \n                  <Button onClick={()=>setOpenSignIn(true)}>Sign In</Button>\n\n                 \n                  <Button onClick={()=>setOpen(true)}>Sign Up</Button>\n\n              </div>\n\n\n\n              \n\n          )}\n\n          </div>\n\n         \n\n          <div className=\"app__posts\">\n          \n              <div className=\"app__postsLeft\">\n              {\n                posts.map(( {id,posts})=>\n               (\n                  <Posts key={id} postId={id} user={user} username={posts.username} caption={posts.caption} imageurl={posts.imageurl}/> \n                ))\n\n                 }\n\n              </div>\n              <div className=\"app__postsRight\">\n              \n              <InstagramEmbed\n               url='https://instagr.am/p/Zw9o4/'\n              maxWidth={320}\n              hideCaption={false}\n               containerTagName='div'\n               protocol=''\n               injectScript\n              onLoading={() => {}}\n              onSuccess={() => {}}\n              onAfterRender={() => {}}\n              onFailure={() => {}}\n              />\n          \n\n              </div>\n          \n          </div>\n\n          \n        \n\n\n\n\n        {user?.displayName ? (\n          <ImageUpload username={user.displayName}/>\n\n        ):\n        (\n          <h3>Sorry you need to login</h3>\n        )}\n     \n\n          \n    </div>\n       \n       \n       \n       \n\n  );\n}\n\nexport default App;\n\n/* <img  className=\"app_headerImage\" \n                    src={DynamicFeedIcon}\n                    alt='no picture'\n\n              />\n              \n              \n              {\n        username:\"rethick\",\n        caption:\"UOLO\",\n        imageurl:\" http://static.dnaindia.com/sites/default/files/styles/full/public/2018/03/10/659317-arvind-kejriwal-1-pti.jpg\"\n   \n    },\n\n    {\n      username:\"rethick\",\n      caption:\"UOLO\",\n      imageurl:\" http://static.dnaindia.com/sites/default/files/styles/full/public/2018/03/10/659317-arvind-kejriwal-1-pti.jpg\"\n \n    }\n\n              \n              \n              \n              */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}